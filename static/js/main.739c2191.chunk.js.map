{"version":3,"sources":["types/TodoStatus.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoItem","todo","selectedTodo","onSelectedTodo","isSelectedTodo","id","className","classNames","completed","title","type","onClick","TodoList","todos","map","TodoFilter","query","onQueryChange","selectedFilter","onSelectedFilter","value","onChange","event","target","Object","values","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","catch","error","console","log","finally","href","email","name","App","setTodos","setSelectedTodo","setQuery","All","setSelectedFilter","todosFromSerwer","filteredTodos","useMemo","todosCopy","normalizedQuery","toLowerCase","trim","filter","includes","Active","Completed","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.739c2191.chunk.js","sourcesContent":["export enum TodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo\n  selectedTodo: Todo | null,\n  onSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  selectedTodo,\n  onSelectedTodo,\n}) => {\n  const isSelectedTodo = selectedTodo?.id === todo.id;\n\n  return (\n    <tr\n      key={todo.id}\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': isSelectedTodo,\n      })}\n    >\n      <td className=\"is-vcentered\">\n        {todo.id}\n      </td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-success': todo.completed,\n          'has-text-danger': !todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': !isSelectedTodo,\n                'fa-eye-slash': isSelectedTodo,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onSelectedTodo: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          todo={todo}\n          selectedTodo={selectedTodo}\n          onSelectedTodo={onSelectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  query: string,\n  onQueryChange: (val: string) => void,\n  selectedFilter: string,\n  onSelectedFilter: (val: TodoStatus) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  selectedFilter,\n  onSelectedFilter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            className=\"is-capitalized\"\n            value={selectedFilter}\n            onChange={(event) => {\n              onSelectedFilter(event.target.value as TodoStatus);\n            }}\n          >\n            {(Object.values(TodoStatus))\n              .map((value) => (\n                <option\n                  value={value}\n                  key={value}\n                >\n                  {value}\n                </option>\n              ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  onSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onSelectedTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (todo.userId) {\n      getUser(todo.userId)\n        .then(setUser)\n        .catch((error) => {\n          // eslint-disable-next-line no-console\n          console.log(error);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { getTodos } from './api';\n\nconst getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  selectedFilter: string,\n) => {\n  let todosCopy = [...todos];\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    todosCopy = todosCopy.filter(({ title }) => (\n      title.toLowerCase().includes(normalizedQuery)\n    ));\n  }\n\n  if (selectedFilter) {\n    todosCopy = todosCopy.filter(({ completed }) => {\n      switch (selectedFilter) {\n        case TodoStatus.Active:\n          return !completed;\n        case TodoStatus.Completed:\n          return completed;\n        default:\n          return todosCopy;\n      }\n    });\n  }\n\n  return todosCopy;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [selectedFilter, setSelectedFilter] = useState<TodoStatus>(TodoStatus.All);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then((todosFromSerwer) => {\n        setTodos(todosFromSerwer);\n      })\n      .catch((error) => {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, query, selectedFilter);\n  }, [todos, query, selectedFilter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                selectedFilter={selectedFilter}\n                onSelectedFilter={setSelectedFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  onSelectedTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}